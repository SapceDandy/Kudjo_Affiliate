rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    function isInfluencer() {
      return request.auth != null && request.auth.token.role == 'influencer';
    }

    function isBusiness() {
      return request.auth != null && request.auth.token.role == 'business';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isSeedingUser() {
      return request.auth != null && request.auth.token.email == 'devon@getkudjo.com';
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isAdmin() || isSeedingUser();
    }

    // Allow business owners to create and manage their own profile docs
    match /businesses/{bizId} {
      // Allow all authenticated users (incl. influencers) to read business profiles
      allow read: if request.auth != null;
      allow create: if isOwner(bizId) || isAdmin() || isSeedingUser();
      allow update: if isOwner(bizId) || isAdmin() || isSeedingUser();
    }

    // Add influencers collection rules (previously missing)
    match /influencers/{infId} {
      allow read: if isOwner(infId) || isAdmin();
      allow create: if isOwner(infId) || isAdmin() || isSeedingUser();
      allow update: if isOwner(infId) || isAdmin() || isSeedingUser();
    }

    match /offers/{offerId} {
      // Allow authenticated users to read active offers
      allow read: if request.auth != null && (
        resource.data.status == 'active' || resource.data.active == true || isAdmin()
      );
      allow create: if isBusiness() && request.resource.data.bizId == request.auth.uid || isSeedingUser();
      allow update: if isBusiness() && resource.data.bizId == request.auth.uid || isSeedingUser();
      allow delete: if isAdmin();
    }

    match /contentCoupons/{couponId} {
      allow read: if request.auth != null && (
        isAdmin() || resource.data.infId == request.auth.uid || resource.data.bizId == request.auth.uid
      );
      allow create: if isInfluencer() && request.resource.data.infId == request.auth.uid || isSeedingUser();
      allow update: if isAdmin() || (isBusiness() && resource.data.bizId == request.auth.uid) || isSeedingUser();
    }

    match /affiliateLinks/{linkId} {
      allow read: if request.auth != null && (
        isAdmin() || resource.data.infId == request.auth.uid || resource.data.bizId == request.auth.uid
      );
      allow create: if isInfluencer() && request.resource.data.infId == request.auth.uid;
      allow update: if isAdmin() || (isBusiness() && resource.data.bizId == request.auth.uid);
    }
    // Campaigns: summary docs to track influencer active programs
    match /campaigns/{campaignId} {
      allow read: if request.auth != null && (
        isAdmin() || resource.data.infId == request.auth.uid || resource.data.bizId == request.auth.uid
      );
      allow create, update: if false; // server or cloud functions only
    }

    match /redemptions/{redemptionId} {
      allow read: if isAdmin() || (isInfluencer() && resource.data.infId == request.auth.uid) || (isBusiness() && resource.data.bizId == request.auth.uid);
      allow create: if isAdmin() || (isBusiness() && request.resource.data.bizId == request.auth.uid);
      allow update: if isAdmin();
    }

    match /fraudFlags/{flagId} {
      allow read, write: if isAdmin();
    }

    match /admin/outreachCampaigns/{campaignId=**} {
      allow read, write: if isAdmin();
    }
    // New collections access (basic dev-friendly rules; tighten in prod)
    // Production-tight rules (adjust as needed)
    match /coupons/{id} {
      allow read: if request.auth != null && (
        resource.data.infId == request.auth.uid ||
        exists(/databases/$(database)/documents/businesses/$(request.auth.uid))
      );
      allow create, update: if isSeedingUser(); // allow seeding
    }
    match /affiliateLinks/{id} {
      allow read: if request.auth != null && (
        resource.data.infId == request.auth.uid ||
        resource.data.bizId == request.auth.uid
      );
      allow create, update: if false; // only via server
    }
    match /posts/{id} {
      allow read: if request.auth != null && resource.data.influencerId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.influencerId == request.auth.uid;
      allow update: if false; // server updates status
    }
    match /payouts/{id} {
      allow read: if request.auth != null && resource.data.influencerId == request.auth.uid;
      allow create, update: if false; // server only
    }
    match /events/{id} {
      allow read: if false; // internal
      allow create: if false; // server only
    }
  }
} 